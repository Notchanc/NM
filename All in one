Aim: Bisection method 

A) Bisection method 

code:

import scipy
from scipy.optimize import bisect

def f(x):
    return x**2 - x - 2

a, b = 1, 3

root = bisect(f, a, b)

print(f"Approximate root: {root:.6f}")



Aim: Regula falsi Method 

A) Regula falsi Method 

code:

import scipy
from scipy.optimize import brentq

def f(x):
    return x**3 - x - 1

a, b = 1, 2

root = brentq(f, a, b)

print(f"Approximate root (Brentâ€™s method): {root:.6f}")




Aim: Newton-Raphson method

A) Newton-Raphson method

code:

import scipy
from scipy.optimize import newton

def f(x):
    return x**3 - 2*x - 5

def df(x):
    return 3*x**2 - 2

initial_guess = 2

root = newton(f, initial_guess, fprime=df)

print(f"Approximate root (Newton-Raphson method): {root:.6f}")





Aim: Gauss Elimination Method 

A) Gauss Elimination Method 

code:

import numpy as np

A = np.array([[3, 6, 1],
              [2, 4, 3],
              [1, 3, 2]], dtype=float)

b = np.array([16, 13, 9], dtype=float)

solution = np.linalg.solve(A, b)

print("Solution (Using NumPy):", solution)



Aim: L.U. Decomposition Method 

A) L.U. Decomposition Method 

code:

import numpy as np
from scipy.linalg import lu_factor, lu_solve

A = np.array([[2, 5],
              [1, 2]], dtype=float)

B = np.array([21, 8], dtype=float)

LU, piv = lu_factor(A)

X = lu_solve((LU, piv), B)

print("Solution (x, y):", X)




Aim: Newton Cote's

A) Trapezoidal Method 

code:

import numpy as np

def f(x):
    return 1 / (1 + x)

a, b = 0, 1
n = 6

x = np.linspace(a, b, n+1)
y = f(x)

trapz_result = np.trapz(y, x)

print(f"Trapezoidal Rule Result: {trapz_result:.6f}")


B) Simpsons 1/3rd  Rule

code:

from scipy.integrate import simpson
import numpy as np

def f(x):
    return 1 / (1 + x)

a, b = 0, 1
n = 6

x = np.linspace(a, b, n+1)
y = f(x)

simps_1_3_result = simpson(y, x=x)

print(f"Simpson's 1/3rd Rule Result: {simps_1_3_result:.6f}")




Aim: Eulers Method 

A) Eulers Method 

code:

import numpy as np

def f(x, y):
    return y + x

def euler_method(f, x0, y0, h, x_end):
    x = x0
    y = y0
    while x < x_end:
        y = y + h * f(x, y)
        x += h
    return y

x0 = 0
y0 = 2
h = 0.05
x_end = 2

y_2 = euler_method(f, x0, y0, h, x_end)
print(f"Approximate solution at x = {x_end} is y({x_end}) = {y_2}")






Aim: Runge kutta Method 

A) Runge kutta Method 

code:

import numpy as np
from scipy.integrate import solve_ivp

def func(x, y):
    return x + y

x0, y0 = 0, 1
x_end = 1.1

solution = solve_ivp(func, (x0, x_end), [y0], method='RK45', 
                     t_eval=np.linspace(x0, x_end, int((x_end-x0)/0.1)+1))

y_1_1 = solution.y[0][-1]

print(f"y(1.1) = {y_1_1:.6f}")
